{"name":"Log4cplus-trunk","tagline":"","body":"Short Description\r\n=================\r\n\r\nlog4cplus is a simple to use C++ logging API providing thread-safe,\r\nflexible, and arbitrarily granular control over log management and\r\nconfiguration.  It is modeled after the Java log4j API.\r\n\r\n\r\nLatest Project Information\r\n==========================\r\n\r\nThe latest up-to-date information for this project can be found at\r\n[log4cplus.sourceforge.net](http://log4cplus.sourceforge.net).  Please\r\nsubmit bugs, patches, feature requests, etc., there.\r\n\r\n\r\nTested on the following platforms\r\n=================================\r\n\r\n- Linux/AMD64 with GCC 4.7.2 (Ubuntu/Linaro 4.7.2-2ubuntu1)\r\n- Linux/AMD64 with Sun C++ 5.12 Linux_i386 2011/11/16\r\n- Linux/AMD64 with Clang version 3.0-6ubuntu3 (tags/RELEASE_30/final)\r\n  (based on LLVM 3.0)\r\n- Linux/AMD64 with Intel(R) C++ Intel(R) 64 Compiler XE for\r\n  applications running on Intel(R) 64, Version 12.1 Build 20120410\r\n- FreeBSD/AMD64 with GCC 3.4.6, 4.2.1 and 4.3.3\r\n- Windows 7 with MS Visual Studio 2010 and 2012\r\n- OpenSolaris 5.11/i386 with Sun C++ 5.10 SunOS_i386 128229-02\r\n  2009/09/21, with `-library=stlport4`\r\n- Solaris 5.10/Sparc with Sun C++ 5.8 2005/10/13, with\r\n  `-library=stlport4` and with `-library=Cstd`.\r\n- Solaris 5.10/Sparc with GCC 3.4.3 (csl-sol210-3_4-branch+sol_rpath)\r\n- NetBSD 6.0/AMD64 with GCC 4.5.3 (NetBSD nb2 20110806)\r\n- OpenBSD 5.2/AMD64 with GCC 4.2.1 20070719\r\n- MacOS X 10.8 with GCC 4.2.1 (Apple Inc. build 5664)\r\n\r\n\r\nConfigure script options\r\n========================\r\n\r\n`--enable-debugging`\r\n--------------------\r\n\r\nThis option is disabled by default.  This option mainly affects GCC\r\nbuilds but it also has some limitted effect on non-GCC builds.  It\r\nturns on debugging information generation, undefines `NDEBUG` symbol,\r\nadds `-fkeep-inline-functions` and `-fstack-check` (GCC).\r\n\r\n\r\n`--enable-warnings`\r\n-------------------\r\n\r\nThis option is enabled by default.  It adds platform / compiler\r\ndependent warning options to compiler command line.\r\n\r\n\r\n`--enable-so-version`\r\n---------------------\r\n\r\nThis option is enabled by default.  It enables SO version decoration\r\non resulting library file, e.g., the `.2.0.0` in\r\n`liblog4cplus-1.2.so.2.0.0`.\r\n\r\n\r\n`--enable-release-version`\r\n--------------------------\r\n\r\nThis option is enabled by default.  It enables release version\r\ndecoration on the resulting library file, e.g., the `-1.2` in\r\n`liblog4cplus-1.2.so.2.0.0`.\r\n\r\n\r\n`--enable-profiling`\r\n--------------------\r\n\r\nThis option is disabled by default.  This option adds profiling\r\ninformation generation compiler option `-pg` to GCC and Sun CC /\r\nSolaris Studio builds.\r\n\r\n\r\n`--enable-threads`\r\n------------------\r\n\r\nThis option is enabled by default.  It turns on detection of necessary\r\ncompiler and linker flags that enable POSIX threading support.\r\n\r\nWhile this detection usually works well, some platforms still need\r\nhelp with configuration by supplying additional flags to the configure\r\nscript.  One of the know deficiencies is Solaris Studio on Linux.  See\r\none of the later note for details.\r\n\r\n\r\n`--with-working-locale`\r\n-----------------------\r\n\r\nThis is one of three locale and `wchar_t` <-> `char` conversion\r\nrelated options.  It is disabled by default.\r\n\r\nIt is know to work well with GCC on Linux.  Other platforms generally\r\nhave lesser locale support in their implementations of the C++\r\nstandard library.  It is known not to work well on any *BSD.\r\n\r\nSee also docs/unicode.txt.\r\n\r\n\r\n`--with-working-c-locale`\r\n-------------------------\r\n\r\nThis is second of `wchar_t` <-> `char` conversion related options.  It\r\nis disabled by default.\r\n\r\nIt is known to work well on most *NIX platforms, including recent Cygwin.\r\n\r\n\r\n`--with-iconv`\r\n--------------\r\n\r\nThis is third of `wchar_t` <-> `char` conversion related options.  It is\r\ndisabled by default.\r\n\r\nThe conversion using iconv() function always uses `\"UTF-8\"` and\r\n`\"WCHAR_T\"` as source/target encodings.  It is known to work well on\r\nplatforms with GNU iconv.  Different implementations of `iconv()`\r\nmight not support `\"WCHAR_T\"` encoding selector.\r\n\r\nEither system provided `iconv()` or library provided `libiconv()` are\r\ndetected and accepted.  Also both SUSv3 and GNU `iconv()` function\r\nsignatures are accepted.\r\n\r\n\r\n`--with-qt`\r\n-----------\r\n\r\nThis option is disabled by default.  It enables compilation of a\r\nseparate shared library (liblog4cplusqt4debugappender) that implements\r\n`Qt4DebugAppender`.  It requires Qt4 and pkg-config to be installed.\r\n\r\n\r\nNotes\r\n=====\r\n\r\nCygwin/MinGW\r\n------------\r\n\r\nSome version of GCC (3.4.x and probably some of 4.x series too) on\r\nWindows (both Mingw and Cygwin) produces lots of warnings of the form:\r\n\r\n`warning: inline function 'void foo()' is declared as dllimport:\r\nattribute ignored`\r\n\r\nThis can be worked around by adding `-Wno-attributes` option to GCC\r\ncommand.  Unfortunatelly, not all affected version of GCC have this\r\noption.\r\n\r\n\r\nWindows and TLS\r\n---------------\r\n\r\nlog4cplus uses thread-local storage (TLS) for NDC, MDC and to optimize\r\nuse of some temporary objects.  On Windows there are two ways to get\r\nTLS:\r\n\r\n(1) using `TlsAlloc()`, etc., functions\r\n(2) using `__declspec(thread)`\r\n\r\nWhile method (2) generates faster code, it has some limitations prior\r\nto Windows Vista.  If log4cplus.dll is loaded at run time using\r\n`LoadLibrary()` (or as a dependency of such loaded library), then\r\naccessing `__declspec(thread)` variables can cause general protection\r\nfault (GPF) errors.  This is because Windows prior to Windows Vista do\r\nnot extend the TLS for libraries loaded at run time using\r\nLoadLibrary().  To allow using the best available method, log4cplus\r\nenables the method (2) by checking `_WIN32_WINNT >= 0x0600` condition,\r\nwhen compiling log4cplus targetted to Windows Vista or later.\r\n\r\n\r\nThreads and signals\r\n-------------------\r\n\r\nlog4cplus is not safe to be used from async signals' handlers.  This\r\nis a property of most threaded programmes in general.  If you are\r\ngoing to use log4cplus in threaded application and if you want to use\r\nlog4cplus from signal handlers then your only option is to block\r\nsignals in all threads but one that will handle all signals.  On POSIX\r\nplatforms, this is possible using the `sigwait()` call.  log4cplus\r\nenables this approach by blocking all signals in any threads created\r\nthrough its threads helpers.\r\n\r\n\r\nIBM's XL C/C++ compiler\r\n-----------------------\r\n\r\nIBM's XL C/C++ compiler executable has [many variants][1].  To compile\r\nlog4cplus with threading support specify one of the compiler variants\r\nthat support threading using the `CXX` variable on configure script\r\ncommand line.  E.g.:\r\n\r\n    $ ../configure --enable-threads CXX=xlC_r\r\n\r\n[1]: http://pic.dhe.ibm.com/infocenter/comphelp/v121v141/index.jsp?topic=%2Fcom.ibm.xlcpp121.aix.doc%2Fcompiler_ref%2Ftucmpinv.html\r\n\r\n\r\nAIX reentrancy problem\r\n----------------------\r\n\r\nThere appears to be a reentracy problem with AIX 5.3 and xlC 8 which\r\ncan result into a deadlock condition in some curcumstances.  It is\r\nunknown whether the problem manifests with other versions of either\r\nthe OS or the compiler, too.  The problem was initially reported in a\r\nbug report [#103][2].\r\n\r\nThe core of the problem is that IBM's/xlC's standard C++ IOStreams\r\nimplementation uses global non recursive lock to protect some of its\r\nstate.  The application in the bug report was trying to do logging\r\nusing log4cplus from inside `overflow()` member function of a class\r\nderived from `std::streambuf` class.  log4cplus itself uses\r\n`std::ostringstream`.  This resulted into an attempt to recursivly\r\nlock the global non recursive lock and a deadlock.\r\n\r\n[2]: http://sourceforge.net/p/log4cplus/bugs/103/\r\n\r\n\r\nSolaris / SunOS\r\n---------------\r\n\r\nSome older version of this operating system might have problems\r\nlinking log4cplus due to [missing `__tls_get_addr`][3] in their\r\nunpatched state.\r\n\r\n[3]: https://groups.google.com/d/msg/comp.unix.solaris/AAMqkK0QZ6U/zlkVKA1L_QcJ\r\n\r\n\r\nSolaris Studio\r\n--------------\r\n\r\nSolaris Studio compilers' default standard C++ library is very\r\nnon-standard.  It seems that it is not conforming enough in, e.g., Sun\r\nC++ 5.12 Linux_i386 2011/11/16 (missing `std::time_t`, etc.), but it\r\nworks well enough on Solaris with Sun C++ 5.8 2005/10/13.  Thus\r\nlog4cplus adds `-library=stlport4` to the `CXXFLAGS` environment\r\nvariable, unless a switch matching `-library=(stlport4|stdcxx4|Cstd)`\r\nis already present there.  If you want to override the default\r\nsupplied by log4cplus, just set it into `CXXFLAGS` on configure script\r\ncommand line.\r\n\r\nSolaris Studio supports the `__func__` symbol which can be used by\r\nlog4cplus to record function name in logged events.  To enable this\r\nfeature, add `-features=extensions` switch to `CXXFLAGS` for configure\r\nscript.  Subsequently, you will have to add this switch to your\r\napplication's build flags as well.\r\n\r\n\r\nSolaris Studio on GNU/Linux\r\n---------------------------\r\n\r\nThe autotools and our configure.ac combo does not handle Solaris\r\nStudio compiler on Linux well enough and needs a little help with\r\nconfiguration of POSIX threads:\r\n\r\n    $ COMMON_FLAGS=\"-L/lib/x86_64-linux-gnu/ \\\r\n    -L/usr/lib/x86_64-linux-gnu/ -mt=yes -O\"\r\n\r\n    $ ../configure --enable-threads=yes \\\r\n    CC=/opt/solarisstudio12.3/bin/cc \\\r\n    CXX=/opt/solarisstudio12.3/bin/CC \\\r\n    CFLAGS=\"$COMMON_FLAGS\" \\\r\n    CXXFLAGS=\"$COMMON_FLAGS\" \\\r\n    LDFLAGS=\"-lpthread\"\r\n\r\n\r\nQt4 / Win32 / MSVC\r\n------------------\r\n\r\nIn order to use log4cplus in Qt4 programs it is necessary to set\r\nfollowing option: `Treat WChar_t As Built in Type: No (/Zc:wchar_t-)`\r\n\r\nSet this option for log4cplus project and `Qt4DebugAppender` project\r\nin MS Visual Studio.  Remember to use Unicode versions of log4cplus\r\nlibraries with Qt.  It is also necessary to make clear distinction\r\nbetween debug and release builds of Qt project and log4cplus.  Do not\r\nuse log4cplus release library with debug version of Qt program or vice\r\nversa.\r\n\r\nFor registering Qt4DebugAppender library at run-time call this\r\nfunction: `log4cplus::Qt4DebugAppender::registerAppender()`\r\n\r\nAdd these lines to qmake project file for using log4cplus and\r\n`Qt4DebugAppender`:\r\n\r\n    INCLUDEPATH += C:\\log4cplus\\include\r\n    win32 {\r\n        CONFIG(debug, debug|release) {\r\n            LIBS += -LC:\\log4cplus\\msvc10\\Win32\\bin.Debug_Unicode -llog4cplusUD\r\n            LIBS += -LC:\\log4cplus\\msvc10\\Win32\\bin.Debug_Unicode -llog4cplus-Qt4DebugAppender\r\n        } else {\r\n            LIBS += -LC:\\log4cplus\\msvc10\\Win32\\bin.Release_Unicode -llog4cplusU\r\n            LIBS += -LC:\\log4cplus\\msvc10\\Win32\\bin.Release_Unicode -llog4cplus-Qt4DebugAppender\r\n        }\r\n    }\r\n\r\n\r\nQt / GCC \r\n--------\r\n\r\nYou might encounter the following error during compilation with\r\n`--with-qt` option:\r\n\r\n`qglobal.h:943: error: ISO C++ does not support 'long long'`\r\n\r\nThis is caused by `-pedantic` option that log4cplus adds to `CXXFLAGS`\r\nwhen compiling with GCC.  To work around this issue, add\r\n`-Wno-long-long` GCC option to `CXXFLAGS`.\r\n\r\n\r\n`LOG4CPLUS_*_FMT()` and UNICODE\r\n-------------------------------\r\n\r\nBeware, the `%s` specifier does not work the same way on *NIX as it\r\ndoes on Windows with Visual Studio.  With Visual Studio the `%s`\r\nspecifier changes its meaning conveniently by printing `wchar_t`\r\nstring when used with `wprintf()` and `char` strings when used with\r\n`printf()`.  On the other hand, *NIX keeps the meaning of printing\r\n`char` strings when used with both `wprintf()` and `printf()`.  It is\r\nnecessary to use `%ls` (C99) specifier or `%S` (SUSv2) specifier to\r\nprint `wchar_t` strings on *NIX.\r\n\r\nThe common ground for both platforms appears to be use of `%ls` and\r\n`wchar_t` string to print strings with unmodified formatting string\r\nargument on both *NIX and Windows.  The conversion of `wchar_t` back\r\nto `char` then depends on C locale.\r\n\r\n\r\nC++11 support\r\n-------------\r\n\r\nlog4cplus contains small amount of code that uses C++11 (ISO/IEC\r\n14882:2011 standard) language features.  C++11 features are used only\r\nif C++11 support is detected during compile time.  Compiling log4cplus\r\nwith C++11 compiler and standard library and using it with C++03\r\n(ISO/IEC 14882:2003 standard) application is not supported.\r\n\r\n\r\nUnsupported compilers\r\n---------------------\r\n\r\nlog4cplus does not support too old or broken C++ compilers:\r\n\r\n- Visual C++ prior to 7.1\r\n- GCC prior to 3.2\r\n- Older versions of Borland/CodeGear/Embarcadero C++ compilers\r\n\r\n\r\nUnsupported platforms\r\n---------------------\r\n\r\nlog4cplus requires some minimal set of C and/or C++ library\r\nfunctions. Some systems/platforms fail to provide these functions and\r\nthus log4cplus cannot be supported there:\r\n\r\n- Windows CE - missing implementations of `<time.h>` functions\r\n\r\n\r\nLicense\r\n=======\r\n\r\nThis library is licensed under the Apache Public License 2.0 and two\r\nclause BSD license.  Please read the included LICENSE file for\r\ndetails.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}